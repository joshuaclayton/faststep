#!/usr/bin/env ruby
#$LOAD_PATH[0,0] = File.join(File.dirname(__FILE__), '..', 'lib')
#
# Note: Ruby 1.9 is faster than 1.8, as expected.
# This suite will be run against the installed version of ruby-mongo-driver.
# The c-extension, bson_ext, will be used if installed.

require 'rubygems'
require 'faststep'
require 'benchmark'

include Faststep

TRIALS = 2
PER_TRIAL = 5000
BATCH_SIZE = 100

SMALL = {}
MEDIUM = {
  'integer' => 5,
  'number' => 5.05,
  'boolean' => false,
  'array' => ['test', 'benchmark']
}
LARGE = {
  'base_url' => 'http://www.example.com/test-me',
  'total_word_count' => 6743,
  'access_time' => Time.now,
  'meta_tags' => {
    'description' => 'i am a long description string',
    'author' => 'Holly Man',
    'dynamically_created_meta_tag' => 'who know\n what'
  },
  'page_structure' => {
    'counted_tags' => 3450,
    'no_of_js_attached' => 10,
    'no_of_images' => 6
  },
  'harvested_words' => ['10gen','web','open','source','application','paas',
                        'platform-as-a-service','technology','helps',
                        'developers','focus','building','mongodb','mongo'] * 20
}

def print_headings
  puts "\nFaststep -- Standard Benchmark"
  puts Time.now.utc.strftime("%d-%b-%Y")
  puts `ruby -v` + "\n"
  puts "Latest Commit:"
  puts `git log | head -n4`
  puts "#{PER_TRIAL} documents or queries per trial. Batches of #{BATCH_SIZE} on batch inserts."
  printf("\n%s%-10s %-15s %-10s %-15s\n\n", "Test".ljust(40, ' '), "(real)", "(real ops/s)", "(user)", "(user ops/s)")
end

def report(str, t, u=nil)
  printf("%s %-10.2f %-15d %-10.2f %-15d\n", str.ljust(40, '.'), t, (PER_TRIAL / t), u, PER_TRIAL / u)
end

def profile(str)
  if ENV['MONGO_PROFILE']
    require 'rubygems'
    require 'ruby-prof'
    prof_results = RubyProf.profile do
      yield
    end
    File.open("benchmark/#{str}.html", "w") do |f|
      RubyProf::GraphHtmlPrinter.new(prof_results).print(f, :min_percent => 5)
    end
  else
    yield
  end
end

def benchmark(str, n, coll_name, data, create_index=false, verbosity=true)
  coll = @db.collection(coll_name)
  coll.create_index('x' => 1) if create_index
  profile(str) do
    GC.start
    tm = Benchmark::Tms.new
    td = tm.add do
      n.times { |i| yield(coll, i) }
    end
    report(str, td.real, td.utime) if verbosity
  end
end

host = ENV['MONGO_RUBY_DRIVER_HOST'] || '127.0.0.1'
port = ENV['MONGO_RUBY_DRIVER_PORT'] || Connection::DEFAULT_PORT

connection = Connection.new(host, port)
connection.drop_database("benchmark")
@db = connection.db('benchmark')

def benchmark_insert(desc, coll_name, data, verbosity=true)
  benchmark(desc, PER_TRIAL, coll_name, data, verbosity) do |coll, i|
    data['x'] = i
    coll.insert(data)
    data.delete(:_id)
  end
end

def benchmark_insert_index(desc, coll_name, data)
  benchmark(desc, PER_TRIAL, coll_name, data, true) do |coll, i|
    data['x'] = i
    coll.insert(data)
    data.delete(:_id)
  end
end


print_headings

if RUBY_PLATFORM =~ /java/
puts "***WARMUP***"
benchmark_insert('insert (small, no index)', 'small_none', SMALL, false)
benchmark_insert('insert (medium, no index)', 'medium_none', MEDIUM, false)
benchmark_insert('insert (large, no index)', 'large_none', LARGE, false)
puts "***WARMUP***"
end
benchmark_insert('insert (small, no index)', 'small_none', SMALL)
benchmark_insert('insert (medium, no index)', 'medium_none', MEDIUM)
benchmark_insert('insert (large, no index)', 'large_none', LARGE)


benchmark_insert_index('insert (small, index)', 'small_indexed', SMALL)
benchmark_insert_index('insert (medium, index)', 'medium_indexed', MEDIUM)
benchmark_insert_index('insert (large, index)', 'large_indexed', LARGE)

def benchmark_insert_batch(desc, coll_name, data)
  benchmark(desc, PER_TRIAL / BATCH_SIZE, coll_name, data) do |coll, i|
    data['x'] = i
    coll.insert([data] * BATCH_SIZE)
    data.delete(:_id)
  end
end

benchmark_insert_batch('insert batch (small, index)', 'small_bulk', SMALL)
benchmark_insert_batch('insert batch (medium, index)', 'medium_bulk', MEDIUM)
benchmark_insert_batch('insert batch (large, index)', 'large_bulk', LARGE)

def benchmark_find_one(desc, coll_name, data)
  benchmark(desc, PER_TRIAL, coll_name, data) do |coll, i|
    coll.find_one({'x' => data})
  end
end

benchmark_find_one('find_one (small, no index)', 'small_none', PER_TRIAL / 2)
benchmark_find_one('find_one (medium, no index)', 'medium_none', PER_TRIAL / 2)
benchmark_find_one('find_one (large, no index)', 'large_none', PER_TRIAL / 2)
benchmark_find_one('find_one (small, no index)', 'small_none', PER_TRIAL / 2)
benchmark_find_one('find_one (medium, no index)', 'medium_none', PER_TRIAL / 2)
benchmark_find_one('find_one (large, no index)', 'large_none', PER_TRIAL / 2)



benchmark_find_one('find_one (small, indexed)', 'small_indexed', PER_TRIAL / 2)
benchmark_find_one('find_one (medium, indexed)', 'medium_indexed', PER_TRIAL / 2)
benchmark_find_one('find_one (large, indexed)', 'large_indexed', PER_TRIAL / 2)

def benchmark_find_all(desc, coll_name, data)
  benchmark(desc, PER_TRIAL, coll_name, data) do |coll, i|
    coll.find({'x' => data}).each {|o| o}
  end
end

benchmark_find_all('find (small, no index)', 'small_none', PER_TRIAL / 2)
benchmark_find_all('find (medium, no index)', 'medium_none', PER_TRIAL / 2)
benchmark_find_all('find (large, no index)', 'large_none', PER_TRIAL / 2)

benchmark_find_all('find (small, indexed)', 'small_indexed', PER_TRIAL / 2)
benchmark_find_all('find (medium, indexed)', 'medium_indexed', PER_TRIAL / 2)
benchmark_find_all('find (large, indexed)', 'large_indexed', PER_TRIAL / 2)

benchmark_find_all('find_range (small, indexed)', 'small_indexed',
                     {"$gt" => PER_TRIAL / 2, "$lt" => PER_TRIAL / 2 + BATCH_SIZE})
benchmark_find_all('find_range (medium, indexed)', 'medium_indexed',
                     {"$gt" => PER_TRIAL / 2, "$lt" => PER_TRIAL / 2 + BATCH_SIZE})
benchmark_find_all('find_range (large, indexed)', 'large_indexed',
                     {"$gt" => PER_TRIAL / 2, "$lt" => PER_TRIAL / 2 + BATCH_SIZE})
